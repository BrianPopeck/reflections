What happens when you initialize a repository? Why do you need to do it?

You create a git repository within the current directory that can begin tracking files (version control)
when you provide the repository with files to track. You need to do this in order to be able to manually
commit and track changes between versions of files using git.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is an in-between state where you can leave files that you think should be committed soon
without actually committing them. This way, you can still edit them and decide to leave them in your
working directory while also having them clearly marked as wanting to be included in the repository too.

How can you use the staging area to make sure you have one commit per logical
change?

You can add multiple changes to the staging area (kind of saving your work as you go)
but wait until there is a "logical" change made before committing.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

When adding experimental features that you are worried may break the program
or can be seen as side additions and not part of the main project. They may
help by allowing you to work on developing two different feature sets in 
isolation (or without having to worry about both at the same time).

How do the diagrams help you visualize the branch structure?

Diagrams are very helpful in showing a nonlinear structure and how git log
traces back through commits via the spacial relationship and connections (shown
via arrows) between commits.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

Merging combines the commits made in two separate branches in a way that makes logical
sense (changes from one branch to not conflict with the other). The diagram shows how the 
new merged together branch has access to all of the commits from both branches (including 
the now defunct branch).

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
